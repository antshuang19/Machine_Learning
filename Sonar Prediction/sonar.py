# -*- coding: utf-8 -*-
"""Sonar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r1IP-GYJiAnRua-eOQ92vol-eN9Hr7Bl

Firstly, we want to import our dictionary that use for predict and train our data
"""

import numpy as np 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Collect our data fron csv file"""

#load our data from sonar data.cs v
sonar_data = pd.read_csv('/content/sonar data.csv',header=None)
sonar_data.head()
#sonar_data.shape

"""We have 208 row and 61 column as training data and test data , below command want to show us about statistics"""

sonar_data.describe()

"""M mean mine and R to be Rock . We look from data , we know that mines have 111 and Rocks have 97 ."""

sonar_data[60].value_counts()

"""For the next step, we need to seperate and label our data in two dimensional """

X = sonar_data.drop(columns=60, axis =1)
Y = sonar_data[60]

"""Train Model to be Logistic Regression"""

X_train,X_test, Y_train,Y_test = train_test_split(X,Y,test_size=0.45,random_state =0)
print(X_train.shape)

"""Next step, we want to make a Logistic Regression Model"""

Model = LogisticRegression()
Model.fit(X_train,Y_train)

"""Evaluation Model"""

#make a prediction from x_train
Y_prediction = Model.predict(X_test)
print("Accuracy will be ",accuracy_score(Y_test,Y_prediction))

"""Make a input and show the prediction"""

input_data = (0.0307,0.0523,0.0653,0.0521,0.0611,0.0577,0.0665,0.0664,0.1460,0.2792,0.3877,0.4992,0.4981,0.4972,0.5607,0.7339,0.8230,0.9173,0.9975,0.9911,0.8240,0.6498,0.5980,0.4862,0.3150,0.1543,0.0989,0.0284,0.1008,0.2636,0.2694,0.2930,0.2925,0.3998,0.3660,0.3172,0.4609,0.4374,0.1820,0.3376,0.6202,0.4448,0.1863,0.1420,0.0589,0.0576,0.0672,0.0269,0.0245,0.0190,0.0063,0.0321,0.0189,0.0137,0.0277,0.0152,0.0052,0.0121,0.0124,0.0055)
#changing input_data as numpy array
np_array=np.asarray(input_data)
np_reshape = np_array.reshape(1,-1)
prediction = Model.predict(np_reshape)

if prediction[0] == 'M':
  print("It is Mine")
else:
  print("It is Rock")